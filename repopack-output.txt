================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2025-06-11T06:06:12.933Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
files/
  names.txt
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    Home.tsx
    Login.tsx
    NameVerification.tsx
  config/
    firebase.ts
  contexts/
    AuthContext.tsx
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
repomix.config.json
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: files/names.txt
================
Here's the list with first names first, sorted by last name:

Fake Account
Nicolas Abad
Khaled Abdulkarim
Kate Adams
Max Adams
Krupa Adusumilli
Sabrina Afroz
Megha Agarwal
Will Agathis
Naza Aibar
SimoneTess Aisiks
Maha Al Fahim
Khalid Alajlan
Jude Alawa
Aziz Aldawood
Mubarak Alliyu
João Almeida
Mia Amin
Ricardo Anaya
Travis Anderson
Andrew Raffi Ansell
Mark Garo Ansell
Sonja Anton
Ruby Au
Yalcin Aydin
Mohammed Azhari
Mo Babeker
Kathryn Bacher
Michael Bakan
Niranjan Balachandar
Alvaro Baleato Varela
Pranay Balijepalli
Alan Balson
Erin Barrett
Itai Barsade
Savannah Baum
Ryan Bayne
Chris Beckmann
Pedro Benoit
Helen Berhanu
Mallika Bhandari
Lauren Bilbo
Becca Blais
Caroline Blanck
Jake Blank
Mira Bodek
Chris Bradbury
Sam Braunseis
Caden Broussard
Carolyn Bruckmann
Cyrus Buckman
Sabrina Bukenya
Courtney Burton
Holly Burwick
Jesse Cai
Keith Calix
Daniela Camargo Carrillo
Maria Cano
Tom Carroll
Zooey Carter Wilkinson
Amir Chain Nemtala
Avis Chan
Charlotte Chang
Devika Chatwani
Zoë Chazen
Anli Chen
Caroline Chen
Grace Chen
Jinny Chen
Kimberly Chen
Sophia Chen
Xixi Chen
Catherine Cheng
Mariam Chikovani
Henry Choi
Wonjun Choi
Eugenio Claro
Josh Cohen
Colter Corish
Mateus Costa
Rakiya Cunningham
Bryan Danielson
Owen Davies
Joshua Davis
Ryan Davis
Ian De Luna
Nico deLuna
Batu Demir
Lydia Deneen
Gabriela Diaz
Catherine Didier
Marcos Diehl
Amir Donath
Omer Doron Attia
Meera Doshi
Hob Du
Noelle Durkin
Fatma Elshenawy
Nico Enriquez
Tyler Erb
Lauren Esrig
Noelle Eveland
Valerie Fanelle
Hamza Farrukh
Andreas Fatschel
Jessica Feng
Eliana Field-Marsham
Sofia Figueroa
Stephen Flynn
Eugénie Fontugne
Paige Frank
Daniel Freedland
Leif Frey
Mengdi (Mandy) Gao
Santiago Garcia Vargas
Anirudh Garg
Ishwar Gawande
Ben Gedeon
Dhanush Girish
David Goehring
Pablo Golac Gutierrez
Cayo Gonzalez
Ana Gonzalez Galindo
Tom Gorman
Carlton Gossett
Chris Gramling
Olivia Greenberg
Sam Greenberg
Esther Gross
Katie Gudeman
Julia Guillemot
Sean Guo
Juliette Hackett
Isa Haegg
Richard Hamrick
Farrukh Hamza
Michelle Han
Conor Harrity
Tess Hartigan
Madi Harvey
Rachel Hersh
Jon Hoey
Vinicius Hojo
Kristen Hong
Royi Horowitz
Zhi Huang
Lizzie Hunpatin
Winston Huynh
Toshi Imamura
Henry Iseman
Joao Jablonski
Akshita Jain
Scotty Jean-Baptiste
Sandhya Jetty
Kripanshi Jindal
Imren Johar
Barclay Jones
Akshatha Kamath
Esther Kamgaing
Vikram Kanodia
Chad Kanoff
Amee Kapadia
Ayesha Karnik
Allison Kaslow
Tamara Kawash
Chris Kay
Farha Khan
Sakshi Khanna
Cyrus Kharche
Laura Kiehl
Hokuto Kikuchi
Brendan Kim
Rachel Kim
Ethan Klein
Annie Klosowicz
Bruno Koba
Peter Koch
Ankita Kodavoor
Steven Koh
Mackenzie Kosseim
Aakash Kotak
Tomi Kovanen
Tushar Krishnan
Tomo Kumahira
Catherine Lacy
Ana Laginha
Norma Langdon
Krystal Lau
Gahong Lee
Katrina Lee
Mark Lee
Mia Lee
Conor Leen
Mikos Legrand
Tyler Lehman
Caroline Levy
Lyn Li
Yue Li
Zhenyan (Jane) Li
Lexie Lin
Alice Liu
Michael Liu
Andrew Lobel
Henry Lu
Jessica Lu
Lucy Ma
Mark Ma
Andrea Madero
Matt Mahowald
Ndirangu Maina
Zac Maslia
Fernando Mata
Keita Matsumoto
Anthony Mattar El Raachini
Lauren Maymar
Alexander McCarthy
Elizabeth McNally
Ian McRae
Holley McShan
Cam McWatt
Arnav Mehta
Eric Meyers
Jordan Miller
Hiroaki Minoo
Suhani Mohan
Munim Moiz
Gherardo Morona
Yoshimi Muneta
Hannah Murdoch
Matt Murphy
Harshi Murthy
Carson Muscat
Marin Nagase Tominaga
Karn Nahata
Sasha Nanda
Chase Navellier
Elliot Nell
Ludwig Neumann
Shelly Ngo
Danielle Nguyen
Michelle Nguyen
Dru Nkansah
Joan Nolla
Arinze Nwagbata
Jerry O'Connor
Bobby O'Reilly
Matias Oberpaur
Gloria Odoemelam
Ewoma Ogbaudu
John Onderdonk
Michael Paretzky
Chanwoo Park
James Park
Terry Park
Sravan Patchala
Kayan Patel
Neal Patel
Ken Pattarasittiwate
Andrew Paulmeno
Kelli Pedersen
Kiera Peltz
Olivia Peniston
Anirudh Pennathur
Nathan Petrie
Doug Phipps
Alan Pimstein
Jackson Polatnick
Meagan Prins-McKinney
Christina Puccinelli
Vibha Puri
Riley Quinn
Claire Rafson
Liam Rahman
Vasundhara Rakesh
Alex Rakestraw
James Ramsay
Angie Rao
Pragati Rastogi
Glenn Reddy
Rachael Rhee
Anya Ring
Joseph Robillard
Aria Rodli
Javi Rodriguez
Abu Rogers
Katharina Rohr
Maria Rojas
Matt Rojas
Micaela Romero
Olivia Rosen
Aislin Roth
Eduardo Rubini
Rob Rush
Priscilla Russo
Shailee Samar
Iladro Sauls
Philipp Schellhaas
Stefano Schiappacasse
Sophie Schick
Paul Sédille
Priyanka Seegobin
Sean Sellers
Joon Seo
Ishir Seth
Jay Shah
Mirai Shah
Evelyn Shao
Akanksha Sharma
Arushi Sharma
Annabel Shaw
Dina Sheira
Michelle Shen
Daniel Sheppard
Chris Shim
Amit Shimshi
Ila Shon
Jack Shumway
Ramon Silva
Jackson Simon
Rohan Sinha
Meredith Slifkin
Shikhar Sood
Preetam Soundararajan
Marc Stark-Ferracci
Adam Starr
Mara Steiu
Eli Stern
Jack Stone
Jack Strauss
Amanda Studebaker
Sushant Sudheendranath
Julia Sun
Kailash Sundaram
Leah Surratt
Max Susman
Gabriela Tafur
Lydia Tahraoui
Sarah Tang
Eliza Teach
Emily Tench
Pat Thitisarnsiri
Seyon Thomas
Claire Thompson
Nick Tobin
Sydney Tomlinson
Gustavo Tori
Henry (Hendrick) Townley
Devan Trammel
Jamie Tym
Shievani Upadhyay
Christian Urrutia
Isabel Vallina Garcia
Katie Van Dyk
Mahek Vara
Dhananjay (DJ) Varma
Agustin Villarreal
Jessica Villarreal Reyes
Sea Wachakorn
Callie Walker
Tyler Walker
Colin Weidmann
Melanie Weinsten
Henry Welsh
Chris West
Cort White
Joseph Wise
Walter Woo
Andre Xiong
Fang (Frank) Xu
Yingkai Xu
Haoxiang (Mike) Yang
Theresa Yu
Michael Yuan
Dario Zarrabian
Elena Zhang
Jade Zhang
Ruoyao Zhang
Max Zhou
Will Zhou
Bastiaan Zwanenburg

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/Home.tsx
================
import React, { useState, useEffect, useMemo } from 'react';
import { doc, updateDoc, getDoc } from 'firebase/firestore';
import { db } from '../config/firebase';
import { useAuth } from '../contexts/AuthContext';

const Home: React.FC = () => {
    const { user, userData, logout, refreshUserData } = useAuth();
    const [imageError, setImageError] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedNames, setSelectedNames] = useState<string[]>([]);
    const [allNames, setAllNames] = useState<string[]>([]);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [submitting, setSubmitting] = useState(false);

    // Load the names from the text file and user's existing selections
    useEffect(() => {
        const loadData = async () => {
            try {
                // Load names from text file
                const response = await fetch('/files/names.txt');
                const text = await response.text();
                const names = text
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line && !line.startsWith('Here\'s the list'))
                    .filter(line => line.length > 0);

                setAllNames(names);

                // Load user's existing selections
                if (user) {
                    await loadUserSelections();
                }
            } catch (error) {
                console.error('Error loading names:', error);
            } finally {
                setLoading(false);
            }
        };

        loadData();
    }, [user]);

    const loadUserSelections = async () => {
        if (!user) return;

        try {
            const userRef = doc(db, 'users', user.uid);
            const userDoc = await getDoc(userRef);

            if (userDoc.exists()) {
                const userData = userDoc.data();
                if (userData.crushes && Array.isArray(userData.crushes)) {
                    setSelectedNames(userData.crushes);
                }
            }
        } catch (error) {
            console.error('Error loading user selections:', error);
        }
    };

    // Filter names based on search term, excluding already selected names AND the user's own verified name
    const filteredAvailableNames = useMemo(() => {
        const excludedNames = [...selectedNames];

        // Also exclude the user's own verified name so they can't select themselves
        if (userData?.verifiedName) {
            excludedNames.push(userData.verifiedName);
        }

        const availableNames = allNames.filter(name => !excludedNames.includes(name));

        if (!searchTerm) return availableNames;

        return availableNames.filter(name =>
            name.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [allNames, selectedNames, searchTerm, userData?.verifiedName]);

    // Handle image load errors
    const handleImageError = () => {
        setImageError(true);
    };

    const getProfileImageUrl = () => {
        if (imageError) {
            return '/files/default-profile.png';
        }
        return userData?.photoURL || '/files/default-profile.png';
    };

    const handleNameToggle = (name: string) => {
        // Don't allow changes if already submitted
        if (userData?.submitted) return;

        setSelectedNames(prev => {
            if (prev.includes(name)) {
                return prev.filter(n => n !== name);
            } else if (prev.length < 25) {
                return [...prev, name];
            }
            return prev;
        });
    };

    const handleSaveDraft = async () => {
        if (!user || userData?.submitted) return;

        setSaving(true);
        try {
            const userRef = doc(db, 'users', user.uid);
            await updateDoc(userRef, {
                crushes: selectedNames,
                updatedAt: new Date()
            });

            // Refresh user data in context
            await refreshUserData();

            alert('Your draft has been saved!');
        } catch (error) {
            console.error('Error saving draft:', error);
            alert('Failed to save draft. Please try again.');
        } finally {
            setSaving(false);
        }
    };

    const handleSubmitList = async () => {
        if (!user || userData?.submitted) return;

        // Confirm submission
        const confirmed = window.confirm(
            `Are you sure you want to submit your list? You will NOT be able to make changes after submission. You have ${selectedNames.length} names selected.`
        );

        if (!confirmed) return;

        setSubmitting(true);
        try {
            const userRef = doc(db, 'users', user.uid);
            await updateDoc(userRef, {
                crushes: selectedNames,
                submitted: true,
                updatedAt: new Date()
            });

            // Refresh user data in context
            await refreshUserData();

            alert('Your list has been submitted! You can no longer make changes.');
        } catch (error) {
            console.error('Error submitting list:', error);
            alert('Failed to submit list. Please try again.');
        } finally {
            setSubmitting(false);
        }
    };

    const handleRemoveSelected = (nameToRemove: string) => {
        // Don't allow changes if already submitted
        if (userData?.submitted) return;

        setSelectedNames(prev => prev.filter(name => name !== nameToRemove));
    };

    if (loading) {
        return <div className="loading">Loading...</div>;
    }

    const isSubmitted = userData?.submitted || false;

    return (
        <div className="dashboard-container">
            <div className="dashboard-card">
                <div className="dashboard-header">
                    <h1>Stanford Last Chances</h1>
                    <div className="user-info">
                        <div className="user-details">
                            <img
                                src={getProfileImageUrl()}
                                alt="Profile"
                                className="profile-pic"
                                onError={handleImageError}
                                onLoad={() => setImageError(false)}
                            />
                            <div>
                                <div className="user-name">{userData?.verifiedName || userData?.displayName || user?.displayName}</div>
                                <div className="user-email">{user?.email}</div>
                            </div>
                        </div>
                        <button className="logout-btn" onClick={logout}>Logout</button>
                    </div>
                </div>

                <div className="dashboard-content">
                    <div className="header-section">
                        <h2>GSB Class of 2025 - Find Your Matches!</h2>
                        {isSubmitted ? (
                            <div className="submitted-notice">
                                Your list has been submitted and can no longer be edited.
                            </div>
                        ) : (
                            <p>Select up to 25 classmates you'd like to "connect" with. Your picks are kept private unless you match.</p>
                        )}
                    </div>

                    <div className="selection-counter">
                        {selectedNames.length} / 25 selected
                        {isSubmitted && <span className="submitted-badge">SUBMITTED</span>}
                    </div>

                    {/* Selected Names Section */}
                    {selectedNames.length > 0 && (
                        <div className="selected-names">
                            <h3>Your Selections ({selectedNames.length})</h3>
                            <div className="name-chips">
                                {selectedNames.map(name => (
                                    <div key={name} className={`name-chip selected ${isSubmitted ? 'readonly' : ''}`}>
                                        <span>{name}</span>
                                        {!isSubmitted && (
                                            <button
                                                onClick={() => handleRemoveSelected(name)}
                                                className="remove-btn"
                                            >
                                                ×
                                            </button>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Search Section - Hide if submitted */}
                    {!isSubmitted && (
                        <div className="search-section">
                            <input
                                type="text"
                                placeholder="Search names..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="search-input"
                            />
                        </div>
                    )}

                    {/* Available Names Section - Hide if submitted */}
                    {!isSubmitted && (
                        <div className="available-names">
                            <h3>
                                Available Classmates
                                {searchTerm && ` (${filteredAvailableNames.length} found)`}
                            </h3>
                            <div className="names-simple-list">
                                {filteredAvailableNames.map(name => {
                                    const isDisabled = selectedNames.length >= 25;

                                    return (
                                        <div
                                            key={name}
                                            onClick={() => !isDisabled && handleNameToggle(name)}
                                            className={`name-list-item ${isDisabled ? 'disabled' : ''}`}
                                        >
                                            <span className="name-text">{name}</span>
                                            <span className="add-btn">+</span>
                                        </div>
                                    );
                                })}
                                {filteredAvailableNames.length === 0 && (
                                    <div className="no-results">
                                        {searchTerm ? 'No names found matching your search.' : 'All classmates have been selected!'}
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {/* Action Buttons */}
                    <div className="action-section">
                        {isSubmitted ? (
                            <div className="submitted-message">
                                <h3>Your list has been submitted!</h3>
                                <p>You selected {selectedNames.length} classmate{selectedNames.length !== 1 ? 's' : ''}. You'll be notified if there are any matches.</p>
                            </div>
                        ) : (
                            <div className="action-buttons">
                                <button
                                    onClick={handleSaveDraft}
                                    disabled={saving || submitting}
                                    className="save-draft-btn"
                                >
                                    {saving ? 'Saving...' : 'Save Draft'}
                                </button>
                                <button
                                    onClick={handleSubmitList}
                                    disabled={saving || submitting || selectedNames.length === 0}
                                    className="submit-btn"
                                >
                                    {submitting ? 'Submitting...' : 'Submit List'}
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Home;

================
File: src/components/Login.tsx
================
import React from 'react';
import { useAuth } from '../contexts/AuthContext';

const Login: React.FC = () => {
    const { signInWithGoogle } = useAuth();

    return (
        <div className="login-container">
            <div className="login-card">
                <h1>Stanford Last Chances</h1>
                <h2>GSB Class of 2025</h2>
                <p>Inspired by Dartmouth College's famous Last Chances tradition for graduating seniors, this is our version. 
                <br></br>
                <br></br>
                Share your crushes anonymously and see if there's a mutual connection - you never know, you might just find love! 
                <br></br>
                <br></br>
                The site will remain active until our Stanford accounts expire in October 2025.</p>

                <div className="login-content">
                    <button
                        className="google-signin-btn"
                        onClick={signInWithGoogle}
                    >
                        <svg className="google-icon" viewBox="0 0 24 24">
                            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                        </svg>
                        Sign in with your Stanford email
                    </button>
                </div>
            </div>
        </div>
    );
};

export default Login;

================
File: src/components/NameVerification.tsx
================
import React, { useState, useEffect, useMemo } from 'react';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '../config/firebase';
import { useAuth } from '../contexts/AuthContext';

const NameVerification: React.FC = () => {
    const { user, userData, refreshUserData, logout } = useAuth();
    const [searchTerm, setSearchTerm] = useState('');
    const [allNames, setAllNames] = useState<string[]>([]);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);

    // Load the names from the text file
    useEffect(() => {
        const loadNames = async () => {
            try {
                const response = await fetch('/files/names.txt');
                const text = await response.text();
                const names = text
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line && !line.startsWith('Here\'s the list'))
                    .filter(line => line.length > 0);

                setAllNames(names);
            } catch (error) {
                console.error('Error loading names:', error);
            } finally {
                setLoading(false);
            }
        };

        loadNames();
    }, []);

    // Filter names based on search term
    const filteredNames = useMemo(() => {
        if (!searchTerm) return allNames;

        return allNames.filter(name =>
            name.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [allNames, searchTerm]);

    const handleNameSelect = async (selectedName: string) => {
        if (!user) return;

        setSaving(true);
        try {
            const userRef = doc(db, 'users', user.uid);
            await updateDoc(userRef, {
                verifiedName: selectedName,
                updatedAt: new Date()
            });

            // Refresh user data to update the context
            await refreshUserData();

        } catch (error) {
            console.error('Error saving verified name:', error);
            alert('Failed to save your selection. Please try again.');
        } finally {
            setSaving(false);
        }
    };

    if (loading) {
        return <div className="loading">Loading...</div>;
    }

    return (
        <div className="verification-container">
            <div className="verification-card">
                <div className="verification-header">
                    <h1>Stanford Last Chances</h1>
                    <div className="user-info">
                        <span>{user?.email}</span>
                        <button className="logout-btn" onClick={logout}>Logout</button>
                    </div>
                </div>

                <div className="verification-content">
                    <h2>To ensure accuracy of matches, which Class of 2025 student are you?</h2>
                    <p>Please select your name from the list below. This helps us match your Stanford email with the name we have for you.</p>

                    <div className="search-section">
                        <input
                            type="text"
                            placeholder="Search for your name..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="search-input"
                        />
                    </div>

                    <div className="names-list">
                        <h3>
                            GSB MBA Class of 2025
                            {searchTerm && ` (${filteredNames.length} found)`}
                        </h3>
                        <div className="names-verification-list">
                            {filteredNames.map(name => (
                                <div
                                    key={name}
                                    onClick={() => !saving && handleNameSelect(name)}
                                    className={`name-verification-item ${saving ? 'disabled' : ''}`}
                                >
                                    <span className="name-text">{name}</span>
                                    <span className="select-btn">Select</span>
                                </div>
                            ))}
                            {filteredNames.length === 0 && (
                                <div className="no-results">
                                    {searchTerm ? 'No names found matching your search.' : 'No names available.'}
                                </div>
                            )}
                        </div>
                    </div>

                    {saving && (
                        <div className="saving-indicator">
                            Saving your selection...
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default NameVerification;

================
File: src/config/firebase.ts
================
import { initializeApp } from "firebase/app";
import { getAuth, GoogleAuthProvider } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getAnalytics } from "firebase/analytics";

const firebaseConfig = {
    apiKey: "AIzaSyDC_YL8wau3PKK1r2ZYYHc32TtnoXe5giQ",
    authDomain: "stanford-lastchances.firebaseapp.com",
    projectId: "stanford-lastchances",
    storageBucket: "stanford-lastchances.firebasestorage.app",
    messagingSenderId: "792276801448",
    appId: "1:792276801448:web:84a43cc96308673321ef9d",
    measurementId: "G-HLD1E4T34S"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export const analytics = getAnalytics(app);

// Configure Google provider to only allow stanford.edu emails
export const googleProvider = new GoogleAuthProvider();
googleProvider.setCustomParameters({
    hd: 'stanford.edu' // This restricts to stanford.edu domain
});

================
File: src/contexts/AuthContext.tsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import type { ReactNode } from 'react';
import type { User } from 'firebase/auth';
import { signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';
import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';
import { auth, googleProvider, db } from '../config/firebase';

interface UserData {
    uid: string;
    email: string;
    displayName: string;
    photoURL: string;
    verifiedName: string; // The actual GSB student name they selected
    crushes: string[]; // Made required, will always be initialized as empty array
    submitted: boolean; // Whether they've submitted their final list
    createdAt: any;
    updatedAt: any;
    lastLogin: any;
}

interface AuthContextType {
    user: User | null;
    userData: UserData | null;
    loading: boolean;
    signInWithGoogle: () => Promise<void>;
    logout: () => Promise<void>;
    refreshUserData: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

interface AuthProviderProps {
    children: ReactNode;
}

const DEFAULT_PROFILE_URL = '/files/default-profile.png';

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);
    const [userData, setUserData] = useState<UserData | null>(null);
    const [loading, setLoading] = useState(true);

    // Function to refresh user data from Firestore
    const refreshUserData = async () => {
        if (!user?.uid) return;

        try {
            const userRef = doc(db, 'users', user.uid);
            const userDoc = await getDoc(userRef);

            if (userDoc.exists()) {
                const data = userDoc.data();
                // Ensure crushes is always an array
                const userData: UserData = {
                    uid: data.uid,
                    email: data.email,
                    displayName: data.displayName,
                    photoURL: data.photoURL,
                    verifiedName: data.verifiedName || '', // Empty string if not verified yet
                    crushes: data.crushes || [], // Fallback to empty array
                    submitted: data.submitted || false, // Default to false if not set
                    createdAt: data.createdAt,
                    updatedAt: data.updatedAt,
                    lastLogin: data.lastLogin
                };
                setUserData(userData);
            }
        } catch (error) {
            console.error('Error refreshing user data:', error);
        }
    };

    // Function to create or update user document
    const createOrUpdateUserDocument = async (user: User) => {
        if (!user.uid) return null;

        const userRef = doc(db, 'users', user.uid);

        try {
            // Check if user document already exists
            const userDoc = await getDoc(userRef);

            if (!userDoc.exists()) {
                // Create new user document
                const newUserData: UserData = {
                    uid: user.uid,
                    email: user.email || '',
                    displayName: user.displayName || user.email?.split('@')[0] || '',
                    photoURL: user.photoURL || DEFAULT_PROFILE_URL,
                    verifiedName: '', // Empty until they verify their name
                    crushes: [], // Always initialize as empty array
                    submitted: false, // Default to false for new users
                    createdAt: serverTimestamp(),
                    updatedAt: serverTimestamp(),
                    lastLogin: serverTimestamp()
                };

                await setDoc(userRef, newUserData);
                console.log('New user document created:', user.email);
                setUserData(newUserData);
                return newUserData;
            } else {
                // Update existing user's last login
                const existingData = userDoc.data();
                const updatedData: UserData = {
                    uid: existingData.uid,
                    email: existingData.email,
                    displayName: user.displayName || existingData.displayName,
                    photoURL: user.photoURL || existingData.photoURL || DEFAULT_PROFILE_URL,
                    verifiedName: existingData.verifiedName || '', // Preserve existing verification
                    crushes: existingData.crushes || [], // Ensure crushes is always an array
                    submitted: existingData.submitted || false, // Preserve submission status
                    createdAt: existingData.createdAt,
                    updatedAt: serverTimestamp(),
                    lastLogin: serverTimestamp()
                };

                await setDoc(userRef, updatedData, { merge: true });
                console.log('User document updated:', user.email);
                setUserData(updatedData);
                return updatedData;
            }
        } catch (error) {
            console.error('Error creating/updating user document:', error);
            return null;
        }
    };

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (user) => {
            console.log('Auth state changed:', user?.email);

            if (user) {
                // Verify user has stanford.edu email
                if (!user.email?.endsWith('@stanford.edu')) {
                    console.log('Invalid email domain:', user.email);
                    await signOut(auth);
                    setUser(null);
                    setUserData(null);
                    alert('Only @stanford.edu email addresses are allowed. Please sign in with your Stanford account.');
                } else {
                    setUser(user);
                    // Create or update user document in Firestore
                    await createOrUpdateUserDocument(user);
                }
            } else {
                setUser(null);
                setUserData(null);
            }

            setLoading(false);
        });

        return unsubscribe;
    }, []);

    const signInWithGoogle = async () => {
        try {
            console.log('Attempting Google sign-in...');
            const result = await signInWithPopup(auth, googleProvider);
            console.log('Sign-in successful:', result.user.email);

            if (!result.user.email?.endsWith('@stanford.edu')) {
                await signOut(auth);
                throw new Error('Only @stanford.edu email addresses are allowed');
            }

            // The user document will be created/updated in the onAuthStateChanged listener

        } catch (error: any) {
            console.error('Login error:', error);

            // Handle specific Firebase errors
            if (error.code === 'auth/configuration-not-found') {
                alert('Authentication is not properly configured. Please contact the administrator.');
            } else if (error.code === 'auth/popup-closed-by-user') {
                // User closed the popup, don't show error
                console.log('Sign-in popup was closed by user');
            } else if (error.code === 'auth/cancelled-popup-request') {
                // Another popup is already open
                console.log('Another sign-in popup is already open');
            } else {
                alert('Login failed. Please make sure you\'re using a @stanford.edu email address.');
            }
        }
    };

    const logout = async () => {
        try {
            await signOut(auth);
            setUserData(null);
            console.log('User signed out successfully');
        } catch (error) {
            console.error('Logout error:', error);
        }
    };

    const value = {
        user,
        userData,
        loading,
        signInWithGoogle,
        logout,
        refreshUserData
    };

    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

================
File: src/App.css
================
/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f8f9fa;
  color: #333;
}

.App {
  min-height: 100vh;
}

/* Loading spinner */
.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  font-size: 18px;
  color: #666;
}

/* Login page styles */
.login-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background: linear-gradient(135deg, #8C1515 0%, #B83A4B 100%);
}

.login-card {
  background: white;
  border-radius: 12px;
  padding: 40px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  text-align: center;
  max-width: 400px;
  width: 100%;
}

.login-card h1 {
  color: #8C1515;
  margin-bottom: 8px;
  font-size: 28px;
  font-weight: 700;
}

.login-card h2 {
  color: #666;
  margin-bottom: 12px;
  font-size: 18px;
  font-weight: 500;
}

.login-card > p {
  color: #777;
  margin-bottom: 30px;
  font-size: 16px;
}

.login-content p {
  margin-bottom: 24px;
  color: #555;
  font-size: 14px;
}

.google-signin-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  width: 100%;
  padding: 14px 20px;
  border: 2px solid #dadce0;
  border-radius: 8px;
  background: white;
  color: #3c4043;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.google-signin-btn:hover {
  background-color: #f8f9fa;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.google-icon {
  width: 20px;
  height: 20px;
}

.login-footer {
  margin-top: 30px;
  padding-top: 20px;
  border-top: 1px solid #eee;
}

.login-footer p {
  color: #666;
  font-size: 12px;
}

/* Name Verification styles */
.verification-container {
  min-height: 100vh;
  padding: 20px;
  background-color: #f8f9fa;
}

.verification-card {
  max-width: 800px;
  margin: 0 auto;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.verification-header {
  background: #8C1515;
  color: white;
  padding: 20px 30px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 15px;
}

.verification-header h1 {
  font-size: 24px;
  font-weight: 700;
}

.verification-content {
  padding: 30px;
}

.verification-content h2 {
  color: #8C1515;
  margin-bottom: 12px;
  font-size: 22px;
  line-height: 1.4;
}

.verification-content > p {
  color: #666;
  margin-bottom: 25px;
  line-height: 1.6;
}

.names-list h3 {
  color: #8C1515;
  margin-bottom: 20px;
  font-size: 18px;
  font-weight: 600;
}

.names-verification-list {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
}

.name-verification-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 15px 20px;
  border-bottom: 1px solid #f0f0f0;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 15px;
}

.name-verification-item:last-child {
  border-bottom: none;
}

.name-verification-item:hover:not(.disabled) {
  background: #f8f9fa;
}

.name-verification-item.disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: #f9f9f9;
}

.select-btn {
  font-weight: 600;
  font-size: 14px;
  color: white;
  background: #8C1515;
  padding: 6px 12px;
  border-radius: 6px;
  transition: all 0.2s ease;
}

.name-verification-item:hover:not(.disabled) .select-btn {
  background: #a01a1a;
}

.saving-indicator {
  text-align: center;
  padding: 20px;
  color: #8C1515;
  font-weight: 600;
  border-top: 1px solid #e1e5e9;
  margin-top: 20px;
}

/* Dashboard styles */
.dashboard-container {
  min-height: 100vh;
  padding: 20px;
  background-color: #f8f9fa;
}

.dashboard-card {
  max-width: 900px;
  margin: 0 auto;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.dashboard-header {
  background: #8C1515;
  color: white;
  padding: 20px 30px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 15px;
}

.dashboard-header h1 {
  font-size: 24px;
  font-weight: 700;
}

.user-info {
  display: flex;
  align-items: center;
  gap: 15px;
  flex-wrap: wrap;
}

.user-info span {
  font-size: 14px;
  opacity: 0.9;
}

.logout-btn {
  background: rgba(255, 255, 255, 0.2);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.3);
  padding: 8px 16px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.2s ease;
}

.logout-btn:hover {
  background: rgba(255, 255, 255, 0.3);
}

.dashboard-content {
  padding: 30px;
}

.header-section {
  margin-bottom: 25px;
}

.dashboard-content h2 {
  color: #8C1515;
  margin-bottom: 12px;
  font-size: 22px;
}

.dashboard-content > p {
  color: #666;
  margin-bottom: 25px;
  line-height: 1.6;
}

.submitted-notice {
  background: #d4edda;
  color: #155724;
  padding: 12px 16px;
  border-radius: 8px;
  border-left: 4px solid #28a745;
  font-weight: 500;
  margin-top: 12px;
}

/* Selection counter */
.selection-counter {
  display: inline-flex;
  align-items: center;
  gap: 10px;
  background: #8C1515;
  color: white;
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: 600;
  font-size: 14px;
  margin-bottom: 25px;
}

.submitted-badge {
  background: rgba(255, 255, 255, 0.3);
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 700;
}

/* Selected names section */
.selected-names {
  margin-bottom: 30px;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 8px;
  border-left: 4px solid #8C1515;
}

.selected-names h3 {
  color: #8C1515;
  margin-bottom: 15px;
  font-size: 16px;
  font-weight: 600;
}

.name-chips {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 12px;
}

.name-chip {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: #8C1515;
  color: white;
  padding: 10px 16px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  min-height: 40px;
  width: 100%;
}

.name-chip.readonly {
  background: #6c757d;
  opacity: 0.8;
}

.name-chip span {
  flex: 1;
  text-align: left;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-right: 8px;
}

.remove-btn {
  background: rgba(255, 255, 255, 0.3);
  color: white;
  border: none;
  width: 24px;
  height: 24px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  flex-shrink: 0;
}

.remove-btn:hover {
  background: rgba(255, 255, 255, 0.5);
}

/* Search section */
.search-section {
  margin-bottom: 25px;
}

.search-input {
  width: 100%;
  padding: 15px 20px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.2s ease;
}

.search-input:focus {
  outline: none;
  border-color: #8C1515;
}

/* Available names section */
.available-names {
  margin-bottom: 30px;
}

.available-names h3 {
  color: #8C1515;
  margin-bottom: 20px;
  font-size: 18px;
  font-weight: 600;
}

/* Names list */
.names-simple-list {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
}

.name-list-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 20px;
  border-bottom: 1px solid #f0f0f0;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 15px;
}

.name-list-item:last-child {
 border-bottom: none;
}

.name-list-item:hover:not(.disabled) {
 background: #f8f9fa;
}

.name-list-item.disabled {
 opacity: 0.5;
 cursor: not-allowed;
 background: #f9f9f9;
}

.name-text {
 flex: 1;
 text-align: left;
}

.add-btn {
 font-weight: bold;
 font-size: 18px;
 color: #8C1515;
 width: 20px;
 height: 20px;
 border-radius: 50%;
 display: flex;
 align-items: center;
 justify-content: center;
 background: rgba(140, 21, 21, 0.1);
}

.no-results {
 padding: 20px;
 text-align: center;
 color: #666;
 font-style: italic;
}

/* Action section */
.action-section {
 text-align: center;
 padding-top: 20px;
 border-top: 1px solid #e1e5e9;
}

.action-buttons {
 display: flex;
 gap: 15px;
 justify-content: center;
 flex-wrap: wrap;
}

.save-draft-btn {
 background: #6c757d;
 color: white;
 border: none;
 padding: 14px 28px;
 border-radius: 8px;
 font-size: 16px;
 font-weight: 600;
 cursor: pointer;
 transition: all 0.2s ease;
}

.save-draft-btn:hover:not(:disabled) {
 background: #5a6268;
 transform: translateY(-1px);
 box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
}

.save-draft-btn:disabled {
 opacity: 0.6;
 cursor: not-allowed;
 transform: none;
}

.submit-btn {
 background: #8C1515;
 color: white;
 border: none;
 padding: 14px 28px;
 border-radius: 8px;
 font-size: 16px;
 font-weight: 600;
 cursor: pointer;
 transition: all 0.2s ease;
}

.submit-btn:hover:not(:disabled) {
 background: #a01a1a;
 transform: translateY(-1px);
 box-shadow: 0 4px 12px rgba(140, 21, 21, 0.3);
}

.submit-btn:disabled {
 opacity: 0.6;
 cursor: not-allowed;
 transform: none;
}

.submitted-message {
 text-align: center;
 padding: 30px 20px;
}

.submitted-message h3 {
 color: #28a745;
 margin-bottom: 12px;
 font-size: 20px;
}

.submitted-message p {
 color: #666;
 font-size: 16px;
 line-height: 1.5;
}

/* User info styles */
.user-details {
 display: flex;
 align-items: center;
 gap: 12px;
}

.profile-pic {
 width: 40px;
 height: 40px;
 border-radius: 50%;
 border: 2px solid rgba(255, 255, 255, 0.3);
}

.user-name {
 font-weight: 600;
 font-size: 14px;
}

.user-email {
 font-size: 12px;
 opacity: 0.8;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
 .login-card {
   padding: 30px 20px;
   margin: 20px;
 }
 
 .login-card h1 {
   font-size: 24px;
 }
 
 .dashboard-container, .verification-container {
   padding: 10px;
 }
 
 .dashboard-header, .verification-header {
   padding: 20px;
   flex-direction: column;
   align-items: flex-start;
 }
 
 .user-info {
   width: 100%;
   justify-content: space-between;
 }
 
 .dashboard-content, .verification-content {
   padding: 20px;
 }
 
 .names-simple-list, .names-verification-list {
   max-height: 300px;
 }
 
 .name-list-item, .name-verification-item {
   padding: 15px;
   font-size: 14px;
 }
 
 .user-details {
   flex-direction: column;
   align-items: flex-start;
   gap: 8px;
 }

 .name-chips {
   grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
   gap: 8px;
 }

 .name-chip {
   font-size: 13px;
   padding: 8px 12px;
   min-height: 36px;
 }

 .verification-content h2 {
   font-size: 20px;
 }

 .action-buttons {
   flex-direction: column;
   align-items: center;
 }

 .save-draft-btn, .submit-btn {
   width: 100%;
   max-width: 300px;
 }

 .submitted-message {
   padding: 20px 10px;
 }
}

@media (max-width: 480px) {
 .login-card {
   padding: 20px 15px;
 }
 
 .dashboard-header h1, .verification-header h1 {
   font-size: 20px;
 }
 
 .dashboard-content h2 {
   font-size: 20px;
 }

 .verification-content h2 {
   font-size: 18px;
 }
 
 .profile-pic {
   width: 32px;
   height: 32px;
 }
 
 .user-name {
   font-size: 13px;
 }
 
 .user-email {
   font-size: 11px;
 }

 .selected-names {
   padding: 15px;
 }

 .search-input {
   padding: 12px 15px;
   font-size: 14px;
 }

 .name-chips {
   grid-template-columns: 1fr;
   gap: 8px;
 }

 .name-chip {
   min-height: 32px;
 }

 .name-verification-item {
   padding: 12px 15px;
 }

 .select-btn {
   font-size: 12px;
   padding: 4px 8px;
 }

 .action-buttons {
   gap: 10px;
 }

 .save-draft-btn, .submit-btn {
   padding: 12px 24px;
   font-size: 15px;
 }

 .submitted-message h3 {
   font-size: 18px;
 }

 .submitted-message p {
   font-size: 15px;
 }
}

================
File: src/App.tsx
================
import React from 'react';
import type { ReactNode } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import Login from './components/Login';
import Home from './components/Home';
import NameVerification from './components/NameVerification';
import './App.css';

interface ProtectedRouteProps {
  children: ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { user, userData, loading } = useAuth();

  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  // If no user is logged in, redirect to login
  if (!user) {
    return <Navigate to="/login" />;
  }

  // If user is logged in but userData is still loading, show loading
  if (!userData) {
    return <div className="loading">Loading user data...</div>;
  }

  // If user is logged in but hasn't verified their name yet, show verification
  if (!userData.verifiedName || userData.verifiedName.trim() === '') {
    return <NameVerification />;
  }

  // User is logged in and has verified their name, show the main content
  return <>{children}</>;
};

interface PublicRouteProps {
  children: ReactNode;
}

const PublicRoute: React.FC<PublicRouteProps> = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  return !user ? <>{children}</> : <Navigate to="/" />;
};

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="App">
          <Routes>
            <Route
              path="/login"
              element={
                <PublicRoute>
                  <Login />
                </PublicRoute>
              }
            />
            <Route
              path="/"
              element={
                <ProtectedRoute>
                  <Home />
                </ProtectedRoute>
              }
            />
          </Routes>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: src/index.css
================
:root {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light;
  background-color: #ffffff;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  cursor: pointer;
  transition: border-color 0.25s;
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Stanford Last Chances</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "stanford-lastchances",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@types/react-router-dom": "^5.3.3",
    "firebase": "^11.2.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}

================
File: repomix.config.json
================
{
    "include": [
        "app/lib/**/*",
        "app/web/index.html",
        "app/web/manifest.json",
        "functions/src/index.ts",
        "functions/lib/index.js",
        "functions/package.json",
        "firebase.json",
        "firestore.indexes.json",
        "app/pubspec.yaml",
        "wm-askfm.txt",
        "wm-dbrules.txt"  
    ],
    "output": {
        "filePath": "repomix-output.txt"
    }
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
