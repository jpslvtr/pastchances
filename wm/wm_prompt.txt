I'm trying to create a clone of Dartmouth's last chances website for my own use - for my graduating Stanford GSB class. I found some source code for Dartmouth's site - it's kind of old, but it should give you the general idea for what I'm trying to make. The code is in repopack-dartmouth.txt. Please read it all.

My code is in repopack-output.txt. Please read it all. The website should be clean, simple, and minimalistic. Simple black and white (and Stanford red if needed) colors. Simple fonts. Nothing fancy.

I want to work on matches now. After a user has submitted their list (not save draft), only then should there be a check (firebase function I guess that runs a few times a day) throughout the other database for other matches. And if there is a match, it shows it in a new section above "Select up to 25 classmates you'd like to "connect" with. Your picks are kept private unless you match." It shows the number of matches and who the match is - name and email. That's it. That's the app. Can you do that for me?

For testing, I created a fake user in the collection. I'm not sure what identifiers you want to use, but they have a displayName and verifiedName (both "Fake Account"). Their document id is "nN1IL0Looi08unkM0RdP". They have an email field. They have a crushes array with "James Park" selected. Their submitted boolean is true. I (James Park) also have my submitted boolean as true because I selected two names - one of them being "Fake Account".

Your responsibility is to help me develop code that is both clean and maintainable. 

General guidance: 
- Whenever you provide code, ensure that you deliver the solution in its entirety, not fragmented into parts.
- The code should be ready to be copied and pasted directly into the target file, completely replacing the existing content without the need for additional adjustments. Edit should not break any existing functionality. Ensure real-time synchronization with Flutter and Firebase.
- If any code involves an API key, include the actual API key in your response. If database rules need to be updated, give me the complete revised set of rules.
- Make no assumptions. If you aren't certain about something, ask.
- Clearly specify the name of the affected file and the exact path where it is located to ensure error-free integration and efficient code management.
- Give me the complete solution every time. Don't give me a partial solution.
- Style: minimal and simple. Ensure it looks good in mobile as well.
