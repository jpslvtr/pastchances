rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Users can only read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Users can only write to their own document
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Additional validation for writes
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && request.auth.token.email.matches('.*@stanford\\.edu$')
        && validateUserUpdate(resource.data, request.resource.data);
      
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.auth.token.email.matches('.*@stanford\\.edu$')
        && validateUserCreation(request.resource.data);
    }
    
    // Helper functions for validation
    function validateUserUpdate(existingData, newData) {
      // Prevent modification of critical fields after creation
      return existingData.uid == newData.uid
        && existingData.email == newData.email
        && existingData.createdAt == newData.createdAt
        // Only allow submitted to change from false to true, never back
        && (existingData.submitted == false || newData.submitted == true)
        // Prevent changes to crushes if already submitted
        && (existingData.submitted == false || existingData.crushes == newData.crushes)
        // Validate crushes array
        && newData.crushes is list
        && newData.crushes.size() <= 10  // Changed from 25 to 10
        && validateCrushes(newData.crushes);
    }
    
    function validateUserCreation(newData) {
      return newData.uid is string
        && newData.email is string
        && newData.email.matches('.*@stanford\\.edu$')
        && newData.submitted == false
        && newData.crushes is list
        && newData.crushes.size() == 0
        && newData.matches is list
        && newData.matches.size() == 0;
    }
    
    function validateCrushes(crushes) {
      return crushes.size() <= 10  // Changed from 25 to 10
        && crushes.toSet().size() == crushes.size(); // No duplicates
    }
  }
}